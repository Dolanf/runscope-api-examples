{
  "swagger": "2.0",
  "info": {
    "title": "Runscope API",
    "description": "Manage all of your Runscope tests programatically.",
    "version": "1.0.0"
  },
  "host": "api-runscope-com-ggep55440e7t.runscope.net",
  "schemes": [
    "https"
  ],
  "basePath": "/",
  "securityDefinitions": {
    "bearer_uptop": {
      "type": "apiKey",
      "name": "swell",
      "in": "header"
    },
    "runscope_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://www-runscope-com-4tsygr5wkuuc.runscope.net/signin/oauth/authorize",
      "tokenUrl": "https://www-runscope-com-4tsygr5wkuuc.runscope.net/signin/oauth/access_token",
      "flow": "accessCode",
      "scopes": {
        "api:read": "Default read access.",
        "bucket:auth_token": "Allows you to read all bucket information, including Authenticated Buckets.",
        "bucket:write": "Allows you to create new buckets on behalf of the user (up to their plan limit).",
        "message:write": "Allows you to create new messages on behalf of the user (up to their plan limit).",
        "account:email": "Allows you to read the email addresses of user accounts.",
        "team:read": "Allows you to read team details such as lists of team members and external service integrations.",
        "test:read": "Allows you to read the details of API tests.",
        "test:write": "Allows you to create, update and delete details of API tests."
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "paths": {
    "/account": {
      "get": {
        "summary": "Account Resource",
        "description": "Information about the authorized account.",
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "description": "Account owner and team information.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Account"
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      }
    },
    "/teams/{team_uuid}/people": {
      "get": {
        "summary": "Teams Resource",
        "description": "List people and integrations associated with a given team.",
        "parameters": [
          {
            "name": "team_uuid",
            "in": "path",
            "description": "Unique identifier for team",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "description": "List of people associated with the team.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
      }
    },
    "/teams/{team_uuid}/integrations": {
      "get": {
        "summary": "Team integrations list",
        "description": "Returns a list of integrations configured for the team.",
        "parameters": [
          {
            "name": "team_uuid",
            "in": "path",
            "description": "Unique identifier for team",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "description": "List of people associated with the team.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
      }
    },
    "/buckets": {
      "get": {
        "summary": "Returns a list of buckets.",
        "tags": [
          "Buckets"
        ],
        "responses": {
          "200": {
            "description": "List of buckets associated with this authenticated account.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Account"
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
      },
      "post": {
        "summary": "Create a new bucket",
        "tags": [
          "Buckets"
        ],
        "parameters": [
          {
            "name": "NewBucket",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewBucket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket details.",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
     }
    },
    "/buckets/{bucketKey}": {
      "get": {
        "summary": "Returns the details of a single bucket resource.",
        "tags": [
          "Buckets"
        ],
        "parameters": [
          {
            "name": "bucketKey",
            "in": "path",
            "description": "Unique identifier for a bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket details.",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a single bucket resource.",
        "tags": [
          "Buckets"
        ],
        "parameters": [
          {
            "name": "bucketKey",
            "in": "path",
            "description": "Unique identifier for a bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content with no body."
          }
        },
        "security": [
          {
            "bearer_uptop": []
          }
        ]
      }
    },
    "/buckets/{bucketKey}/messages": {
      "get": {
        "summary": "Retrieve a list of messages in a bucket",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "bucketKey",
            "in": "path",
            "description": "Unique identifier for a bucket",
            "required": true,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "description": "Maxiumum number of messages to return. Default 50, max 1000."
          },
          {
            "name": "since",
            "in": "query",
            "type": "integer",
            "description": "Only return messages after the given Unix timestamp"
          },
          {
            "name": "before",
            "in": "query",
            "type": "integer",
            "description": "Only return messages before the given Unix timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages in a bucket",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      },
      "delete": {
        "summary": "Clear a bucket (remove all messages).",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "bucketKey",
            "in": "path",
            "description": "Unique identifier for a bucket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content with no body.",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      },
      "post": {
        "summary": "Create a message",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "NewMessage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New message.",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      }
    },
    "/buckets/{bucketKey}/errors": {
      "get": {
        "summary": "Retrieve a list of error messages in a bucket",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "bucketKey",
            "in": "path",
            "description": "Unique identifier for a bucket",
            "required": true,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "type": "integer",
            "description": "Maxiumum number of messages to return. Default 50, max 1000."
          },
          {
            "name": "since",
            "in": "query",
            "type": "integer",
            "description": "Only return messages after the given Unix timestamp"
          },
          {
            "name": "before",
            "in": "query",
            "type": "integer",
            "description": "Only return messages before the given Unix timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "List of error messages in a bucket",
            "schema": {
              "$ref": "#/definitions/Bucket"
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      }
    },
    "/buckets/{bucketKey}/tests": {
      "get": {
        "summary": "Returns a list of tests.",
        "tags": [
          "Tests"
        ],
        "responses": {
          "200": {
            "description": "List of tests for this bucket",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": { 
                    "$ref": "#/definitions/Test"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      },
      "post": {
        "summary": "Create a test.",
        "tags": [
          "Tests"
        ],
        "parameters": [
          {
            "name": "NewTest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTest"
            }
          }
	],
        "responses": {
          "200": {
            "description": "List of tests for this bucket",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": { 
                    "$ref": "#/definitions/Test"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      }
    },
    "/buckets/{bucketKey}/tests/{test_uuid}": {
      "delete": {
        "summary": "Delete a single test.",
        "tags": [
          "Tests"
        ],
        "parameters": [
          {
            "name": "test_uuid",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique identifier for a test"
          }
        ],
        "responses": {
          "204": {
            "description": "No content with no body."
          }
        },
        "security": [
	  {
            "bearer_uptop": []
	  }
        ]
      }
   }
  },
  "definitions": {
    "Test": {
      "properties": {
        "uuid": {
          "type": "string",
          "description": "The unique identifier for the test."
        },
        "name": {
          "type": "string",
          "description": "The name of the test."
        },
        "description": {
          "type": "string",
          "description": "Long-form description of the test."
        },
        "default_environment_uuid": {
          "type": "string",
          "description": "The default environment for the test."
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "/#definitions/Step"
          }

        }

       } 
    },
    "Step": {
      "properties": {
        "assertions": {
          "type": "array",
          "items": {
            "$ref": "/#definitions/Assertion"
          }
        },
        "method": {
          "type": "string"
        },
        "step_type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/Auth"
        },
        "form": {
           "type": "object",
           "description": "JSON object of set of form fields included in a POST request. \nValues can either be represented as a string or as an array of strings."
        }
      }
    },
    "Auth": {
      "type": "object"
    },
    "Assertion": {
      "properties": {
        "source": {
          "type": "string",
          "description": "Left side of assertion expression"
        },
        "property": {
          "type": "string",
          "description": "Property details for source"
        },
        "comparison": {
          "type": "string",
          "description": "Assertion operator"
        },
        "value": {
          "type": "string",
          "description": "Right side of assertion expression"
        }
      }
    },
    "Meta": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Success or failure status of call."
        }
      }
    },
    "Account": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the person for this account."
        },
        "uuid": {
          "type": "string",
          "description": "The unique identifier for this account."
        },
        "email": {
          "type": "string",
          "description": "The email address for this account. Only present if authorized with the account:email scope."
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "/#definitions/Team"
          }
        }
      }
    },
    "Team": {
      "properties": {
        "uuid": {
          "type": "string",
          "description": "The unique identifier for this team."
        },
        "name": {
          "type": "string",
          "description": "The name of this team."
        }
      }
    },
    "Bucket": {
      "properties": {
        "auth_token": {
          "description": "Bucket auth token if set, otherwise this value is null.",
          "type": "string"
        },
        "default": {
          "description": "True if this bucket is the 'default' for a team. Default buckets cannot be deleted.",
          "type": "boolean"
        },
        "key": {
          "description": "The unique identifier used to address a bucket.",
          "type": "string"
        },
        "name": {
          "description": "The name of this bucket as displayed in your dashboard.",
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/Team"
        },
        "verify_ssl": {
          "description": "True if this bucket is configured to verify ssl for requests made to it.",
          "type": "boolean"
        }
      }
    },

    "NewTest": {
       "properties": {
         "name": {
           "type": "string",
	   "description": "Name of this test."
	 },
	 "description": {
           "type": "string",
	   "description": "Human-readable description of the new test."
	 }
       },
       "required": [
          "name"
       ]
   },

    "NewMessage": {
      "properties": {
        "request": {
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "description": "HTTP method name (GET, POST, PUT, HEAD, OPTIONS, PATCH, DELETE, etc.)"
            },
            "url": {
              "type": "string",
              "description": "Full URL of the request, including URL querystring parameters."
            },
            "headers": {
              "type": "string",
              "description": "JSON object of header keys and values -- with values as a string or an array of strings."
            },
            "form": {
              "type": "string",
              "description": "JSON object of set of form fields included in a POST request. \nValues can either be represented as a string or as an array of strings.\n"
            },
            "body": {
              "type": "string",
              "description": "HTTP request body (most commonly used for POST and PUT requests). If the\nrequest body contains binary data that cannot be included directly in the \nJSON, encode the content with Base64 and include the body_encoding attribute accordingly.\n"
            },
            "body_encoding": {
              "type": "string",
              "description": "If the request body was encoded with Base64, this field should be present and set to \n\"base64\". If not specified, defaults to \"plaintext\"\n"
            },
            "timestamp": {
              "type": "number",
              "description": "Unix timestamp indicating when the request was made."
            }
          }
        },
        "response": {
          "type": "object",
          "properties": {
            "status": {
              "type": "integer",
              "description": "HTTP status code returned in the response."
            },
            "reason": {
              "type": "string",
              "description": "Textual description of HTTP status code. This will be set automatically if not \nprovided in the API call. For example, if the status code is 404, this will be \nset to \"Not Found\" unless you explicitly specify a different reason.\n"
            },
            "headers": {
              "type": "string",
              "description": "JSON object of header keys and values -- with values as a string or an array of strings."
            },
            "body": {
              "type": "string",
              "description": "HTTP response body. If the response body contains binary data that cannot be\nincluded directly in the JSON, you should encode the content with Base64.\n"
            },
            "body_encoding": {
              "type": "string",
              "description": "If the request body was encoded with Base64, this field should be present and set to \n\"base64\". If not specified, defaults to \"plaintext\"\n"
            },
            "response_time": {
              "type": "number",
              "description": "Length of time it took to receive the response, in seconds."
            },
            "timestamp": {
              "type": "number",
              "description": "Unix timestamp indicating when the request was made."
            }
          }
        }
      }
    },
    "NewBucket": {
      "properties": {
        "name": {
          "description": "Name of this bucket",
          "type": "string"
        },
        "team_uuid": {
          "description": "Unique identifier for the team this to create this bucket for.",
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}